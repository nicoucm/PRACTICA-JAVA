package simulator.view;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import javax.imageio.ImageIO;
import simulator.control.Controller;
import simulator.model.*;

public class MapComponent extends JPanel implements TrafficSimObserver {
    // Constantes para los colores y tamaños de los elementos en el mapa
    private static final long serialVersionUID = 1L;
    private static final Color _BG_COLOR = Color.WHITE; // Color de fondo
    private static final Color _JUNCTION_COLOR = Color.BLUE; // Color de los cruces
    private static final Color _JUNCTION_LABEL_COLOR = new Color(200, 100, 0); // Color de las etiquetas de los cruces
    private static final Color _GREEN_LIGHT_COLOR = Color.GREEN; // Color de las luces verdes
    private static final Color _RED_LIGHT_COLOR = Color.RED; // Color de las luces rojas
    private static final Color _ROAD_COLOR = Color.BLACK; // Color de las carreteras
    private static final int _JRADIUS = 10; // Radio de los cruces
    private static final int _VEHICLE_SIZE = 16; // Tamaño de los vehículos (en píxeles)

    // Mapa que contiene los elementos del simulador
    private RoadMap _map;
    // Imagen del vehículo (carro)
    private Image _car;

    // Constructor de la clase
    public MapComponent(Controller ctrl) {
        initGUI(); // Inicializa la interfaz gráfica
        ctrl.addObserver(this); // Registra esta clase como observador del simulador
    }

    // Método para inicializar la interfaz gráfica
    private void initGUI() {
        _car = loadImage("car_front.png"); // Carga la imagen del vehículo
        setPreferredSize(new Dimension(600, 400)); // Establece el tamaño preferido del componente
    }

    // Método encargado de dibujar los elementos en el panel
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); // Llama al método paintComponent de JPanel para asegurar la correcta renderización
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); // Activa el antialiasing para bordes suaves
        g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON); // Activa el antialiasing para texto

        g2.setColor(_BG_COLOR); // Establece el color de fondo
        g2.clearRect(0, 0, getWidth(), getHeight()); // Borra todo el área de dibujo

        if (_map == null || _map.getJunctions().isEmpty()) { // Si el mapa no está cargado o no tiene cruces
            g2.setColor(Color.RED);
            g2.drawString("No map yet!", getWidth() / 2 - 50, getHeight() / 2); // Muestra un mensaje de error
        } else {
            drawMap(g2); // Si el mapa está cargado, dibuja el mapa
        }
    }

    // Método para dibujar el mapa
    private void drawMap(Graphics2D g) {
        // Calcular los valores mínimo y máximo para las coordenadas de los cruces
        int minX = Integer.MAX_VALUE, minY = Integer.MAX_VALUE;
        int maxX = Integer.MIN_VALUE, maxY = Integer.MIN_VALUE;
        for (Junction j : _map.getJunctions()) {
            int x = j.getX();
            int y = j.getY();
            minX = Math.min(minX, x); // Calcula el valor mínimo de X
            minY = Math.min(minY, y); // Calcula el valor mínimo de Y
            maxX = Math.max(maxX, x); // Calcula el valor máximo de X
            maxY = Math.max(maxY, y); // Calcula el valor máximo de Y
        }

        // Ajustar el rango y el escalado para que todo el mapa quepa en el panel
        int rangeX = Math.max(maxX - minX, 1); // Rango en X
        int rangeY = Math.max(maxY - minY, 1); // Rango en Y
        double scaleX = (getWidth() - 60.0) / rangeX; // Factor de escala en X
        double scaleY = (getHeight() - 60.0) / rangeY; // Factor de escala en Y
        double scale = Math.min(scaleX, scaleY * 1.5); // Usamos el mínimo de ambas escalas para que todo se ajuste
        int offsetX = 30; // Desplazamiento en X
        int offsetY = 30; // Desplazamiento en Y

        // Verifica si las Y son iguales para separar las carreteras en caso de ser necesario
        boolean sameY = (maxY - minY == 0);
        int yOffset = sameY ? 40 : 0; // Si las Y son iguales, agrega un desplazamiento en Y

        // Mapa para almacenar las posiciones ajustadas de los cruces
        Map<Junction, int[]> adjustedPositions = new HashMap<>();
        if (sameY) {
            // Si las Y son iguales, separa las carreteras verticalmente
            Map<Road, Integer> roadLevels = new HashMap<>();
            int currentLevel = 0;
            for (Road r : _map.getRoads()) {
                roadLevels.put(r, currentLevel); // Asigna un nivel a cada carretera
                currentLevel++;
            }

            // Asegura que ambos extremos de una carretera tengan la misma Y ajustada
            for (Road r : _map.getRoads()) {
                int level = roadLevels.get(r);
                Junction src = r.getSrc();
                Junction dest = r.getDest();
                int x1 = (int) ((src.getX() - minX) * scale) + offsetX;
                int x2 = (int) ((dest.getX() - minX) * scale) + offsetX;
                int adjustedYValue = offsetY + (level * yOffset);
                adjustedPositions.put(src, new int[]{x1, adjustedYValue});
                adjustedPositions.put(dest, new int[]{x2, adjustedYValue});
            }
        } else {
            // Si las Y no son iguales, usa las coordenadas originales escaladas
            for (Junction j : _map.getJunctions()) {
                int x = (int) ((j.getX() - minX) * scale) + offsetX;
                int y = (int) ((j.getY() - minY) * scale) + offsetY;
                adjustedPositions.put(j, new int[]{x, y});
            }
        }

        // Dibujar las carreteras
        g.setColor(_ROAD_COLOR); // Color de las carreteras
        g.setStroke(new BasicStroke(2)); // Establece el grosor de la línea para las carreteras
        for (Road r : _map.getRoads()) {
            Junction src = r.getSrc();
            Junction dest = r.getDest();
            int[] srcPos = adjustedPositions.get(src); // Posición ajustada del origen
            int[] destPos = adjustedPositions.get(dest); // Posición ajustada del destino
            int x1 = srcPos[0];
            int y1 = srcPos[1];
            int x2 = destPos[0];
            int y2 = destPos[1];
            g.drawLine(x1, y1, x2, y2); // Dibuja la línea de la carretera
            g.setColor(Color.BLACK);
            g.drawString(r.getId(), (x1 + x2) / 2 + 5, (y1 + y2) / 2 - 5); // Dibuja el ID de la carretera
            g.setColor(_ROAD_COLOR); // Vuelve a establecer el color de la carretera
        }
        g.setStroke(new BasicStroke(1)); // Vuelve al grosor normal

        // Dibujar los cruces
        for (Junction j : _map.getJunctions()) {
            int[] pos = adjustedPositions.get(j); // Obtener la posición ajustada del cruce
            int x = pos[0];
            int y = pos[1];
            g.setColor(_JUNCTION_COLOR);
            g.fillOval(x - _JRADIUS, y - _JRADIUS, 2 * _JRADIUS, 2 * _JRADIUS); // Dibuja el cruce
            g.setColor(_JUNCTION_LABEL_COLOR);
            g.drawString(j.getId(), x + _JRADIUS + 5, y - _JRADIUS - 5); // Dibuja el ID del cruce
            g.setColor(j.getGreenLightIndex() != -1 ? _GREEN_LIGHT_COLOR : _RED_LIGHT_COLOR); // Dibuja la luz verde o roja
            g.fillOval(x - _JRADIUS / 2, y - _JRADIUS / 2, _JRADIUS, _JRADIUS); // Dibuja la luz
        }

        // Dibujar los vehículos
        for (Vehicle v : _map.getVehicles()) {
            if (v.getRoad() != null) { // Si el vehículo está en una carretera
                Road r = v.getRoad();
                Junction src = r.getSrc();
                Junction dest = r.getDest();
                int[] srcPos = adjustedPositions.get(src);
                int[] destPos = adjustedPositions.get(dest);
                int x1 = srcPos[0];
                int y1 = srcPos[1];
                int x2 = destPos[0];
                int y2 = destPos[1];
                double ratio = (double) v.getLocation() / r.getLength(); // Calcula la posición del vehículo en la carretera
                int x = (int) (x1 + ratio * (x2 - x1));
                int y = (int) (y1 + ratio * (y2 - y1));
                if (_car != null) {
                    g.drawImage(_car, x - _VEHICLE_SIZE / 2, y - _VEHICLE_SIZE / 2, _VEHICLE_SIZE, _VEHICLE_SIZE, this); // Dibuja la imagen del vehículo
                } else {
                    g.setColor(Color.MAGENTA);
                    g.fillOval(x - _VEHICLE_SIZE / 2, y - _VEHICLE_SIZE / 2, _VEHICLE_SIZE, _VEHICLE_SIZE); // Si no hay imagen, dibuja un círculo
                }
                g.setColor(Color.BLACK);
                g.drawString(v.getId(), x + _VEHICLE_SIZE / 2 + 5, y - _VEHICLE_SIZE / 2 - 5); // Dibuja el ID del vehículo
            }
        }
    }

    // Método para cargar imágenes
    private Image loadImage(String img) {
        try {
            return ImageIO.read(new File("resources/icons/" + img)); // Intenta cargar la imagen desde el directorio especificado
        } catch (IOException e) {
            System.out.println("Error cargando imagen " + img + ": " + e.getMessage()); // En caso de error, muestra un mensaje
            return null; // Devuelve null si no se pudo cargar la imagen
        }
    }

    // Actualiza el mapa y redibuja el componente
    private void update(RoadMap map) {
        _map = map;
        updatePreferredSize(); // Actualiza el tamaño preferido del componente
        repaint(); // Vuelve a dibujar el componente
    }

    // Actualiza el tamaño preferido del componente según el mapa
    private void updatePreferredSize() {
        int maxX = 200;
        int maxY = 200;
        if (_map != null && !_map.getJunctions().isEmpty()) {
            for (Junction j : _map.getJunctions()) {
                maxX = Math.max(maxX, j.getX()); // Calcula el valor máximo de X
                maxY = Math.max(maxY, j.getY()); // Calcula el valor máximo de Y
            }
        }
        maxX += 60; // Añade un margen
        maxY += 60; // Añade un margen
        setPreferredSize(new Dimension(maxX * 2, maxY * 2)); // Establece el tamaño preferido del componente
    }

    // Métodos del observador (parte de la interfaz TrafficSimObserver)
    @Override
    public void onAdvance(RoadMap map, Collection<simulator.model.Event> events, int time) {
        update(map); // Actualiza el mapa al avanzar la simulación
    }

    @Override
    public void onEventAdded(RoadMap map, Collection<simulator.model.Event> events, simulator.model.Event e, int time) {
        update(map); // Actualiza el mapa cuando se agrega un evento
    }

    @Override
    public void onReset(RoadMap map, Collection<simulator.model.Event> events, int time) {
        update(map); // Actualiza el mapa al reiniciar la simulación
    }

    @Override
    public void onRegister(RoadMap map, Collection<simulator.model.Event> events, int time) {
        update(map); // Actualiza el mapa al registrar la simulación
    }
}
